name: Dependencies Reviewer

# --------------------------------------------------------------------------
# This workflow is only run when explicitly called by another workflow.
# --------------------------------------------------------------------------
on:
  workflow_call:
    inputs:
      pr_number:
        description: 'The Pull Request number to review.'
        required: true
        type: number
      pr_head_sha:
        description: 'The commit SHA of the PR head branch for checkout.'
        required: true
        type: string
      token_value:
        description: Token with issues:write and pull-requests:write scopes.
        required: true
        type: string

# The permissions grant the GITHUB_TOKEN inside the CALLED workflow the ability
# to read contents and write PR reviews/labels in the CALLER repository.
permissions:
  contents: read
  issues: write        # Explicitly grant write access to issues for labeling
  pull-requests: write # Needed for auto-approving

jobs:
  dependencies-auto-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        # We must use the caller's repository's token to checkout.
        # This action checks out the repo where the CALLER workflow lives.
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: ${{ github.event.repository.full_name }} # Checkout the caller repo
          token: ${{ inputs.token_value }}
          ref: ${{ inputs.pr_head_sha }}
          fetch-depth: 1  # TODO: This may be reviewed once the workflow have more checks

      - name: Get Versions From Commit Message
        shell: bash
        run: |
          COMMIT_SUBJECT="$(git log -1 --format=%s)"
          # Extract two semantic version numbers (e.g., 1.2.3)
          mapfile -t versions < <(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' <<< "$COMMIT_SUBJECT")

          if [[ ${#versions[@]} -eq 2 ]]; then
            echo "FROM_VERSION=${versions[0]}" >> "$GITHUB_ENV"
            echo "TO_VERSION=${versions[1]}" >> "$GITHUB_ENV"
          fi

      - name: Run Dependency Review
        id: dependency_review
        uses: actions/dependency-review-action@40c09b7dc99638e5ddb0bfd91c1673effc064d8a # v4.8.1
        with:
          token: ${{ inputs.token_value }}
          comment-summary-in-pr: always
          show-openssf-scorecard: true
          warn-on-openssf-scorecard-level: 5

      - name: Capture Dependency Review Result
        id: capture_review_result
        # make sure this step runs even if the previous failed
        if: ${{ failure() && steps.dependency_review.conclusion == 'failure' }}
        shell: bash
        run: |
          echo "REVIEW_STEP=failure" >> "$GITHUB_ENV"

      - name: Classify Risk Based on Semantic Version and Review
        id: classify_pr
        shell: bash
        run: |
          if [[ -z "${{ env.FROM_VERSION }}" || -z "${{ env.TO_VERSION }}" ]]; then
            echo "RISK=high" >> "$GITHUB_ENV"
            echo "::notice::No clear versioning detected. Defaulting to high risk."
            exit 0
          fi

          if [[ "${{ env.REVIEW_STEP }}" == 'failure' ]]; then
            echo "RISK=high" >> "$GITHUB_ENV"
            echo "::notice::Auto review failed. Defaulting to high risk."
            exit 0
          fi

          FROM_VER_MAJOR=$(echo "${{ env.FROM_VERSION }}" | cut -d. -f1)
          FROM_VER_MINOR=$(echo "${{ env.FROM_VERSION }}" | cut -d. -f2)
          TO_VER_MAJOR=$(echo "${{ env.TO_VERSION }}" | cut -d. -f1)
          TO_VER_MINOR=$(echo "${{ env.TO_VERSION }}" | cut -d. -f2)

          if [[ "$FROM_VER_MAJOR" -eq "$TO_VER_MAJOR" && "$FROM_VER_MINOR" -eq "$TO_VER_MINOR" ]]; then
            echo "Patch update detected."
            echo "RISK=low" >> "$GITHUB_ENV"
          elif [[ "$FROM_VER_MAJOR" -eq "$TO_VER_MAJOR" && "$FROM_VER_MINOR" -lt "$TO_VER_MINOR" ]]; then
            echo "Minor update detected."
            echo "RISK=medium" >> "$GITHUB_ENV"
          else
            echo "Major update detected. Requires manual review."
            echo "RISK=high" >> "$GITHUB_ENV"
          fi

      - name: Auto-approve Dependabot PR
        id: auto_approve_pr
        if: ${{ env.RISK != 'high' }} # Only auto-approve if the risk is low or medium
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          github-token: ${{ inputs.token_value }}
          script: |
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ inputs.pr_number }},
              event: 'APPROVE',
              body: 'Automatically approved by the standardized CI for ${{ env.RISK }} risk update.'
            });
            console.log('Dependabot PR approved successfully.');

      - name: Add Attention Labels
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          github-token: ${{ inputs.token_value }}
          script: |
            const pr = context.payload.pull_request;
            const title = pr.title.toLowerCase();
            const body = pr.body?.toLowerCase() || '';

            const securityKeywords = [
              'security',
              'github.com/advisories/ghsa'
            ];

            const isSecurityPR = securityKeywords.some(keyword =>
              title.includes(keyword) || body.includes(keyword)
            );

            let labelsToAdd = [];

            // Only add 'help wanted' if security conditions are met
            if (isSecurityPR) {
                labelsToAdd.push('help wanted');
            }

            // Since the risk-level label is no longer needed, we only add if there are labels to add
            if (labelsToAdd.length > 0) {
              console.log(`Adding labels: ${labelsToAdd.join(', ')}`);
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: labelsToAdd,
              });
            }

      - name: Comment on PR
        uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v4.0.0
        with:
          issue-number: ${{ inputs.pr_number }}
          token: ${{ inputs.token_value }}
          body: |
            ü§ñ **Standardized Dependabot Review Summary** ü§ñ

            This PR was processed by the organization's reusable CI pipeline.

            - **Calculated Risk:** **${{ env.RISK }}** (Patches and minor updates may be auto-approved.)
            - **Status:** ${{ env.RISK != 'high' && '‚úÖ Auto-Approved' || '‚ùå Manual Review Required' }}
            - **Action:** A review has been submitted based on semantic version and automated checks.

            ---

            Maintainer check list:
            1. Ensure the PR passed all CI tests (required status checks).
            2. Investigate failures for Major updates or any manual review requirement.
            3. Don't overlook breaking changes and changelog information.
            4. If the scorecard value is low, consider to contribute to make it higher. Everybody wins!
            5. Be diligent. When in doubt, ask another maintainer for additional review.
